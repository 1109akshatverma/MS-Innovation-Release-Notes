name: Repository Folder Inventory

on:
  push:           # Run on every push to any branch
  workflow_dispatch: # Manual trigger
  schedule:
    - cron: "0 0 * * 0" # Weekly on Sunday at midnight UTC

jobs:
  generate-folder-inventory:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch full history for accurate timestamps
          token: ${{ secrets.GITHUB_TOKEN }} # Required for pushing changes

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          pip install pandas openpyxl

      - name: Generate folder inventory
        run: |
          python << 'EOF'
          import os
          import subprocess
          import pandas as pd
          from datetime import datetime

          def get_last_commit_date(folder_path):
              """Get the last commit date for a folder"""
              try:
                  result = subprocess.run(
                      ['git', 'log', '-1', '--format=%cd', '--date=iso', '--', folder_path],
                      capture_output=True,
                      text=True,
                      cwd='.'
                  )
                  if result.returncode == 0 and result.stdout.strip():
                      return result.stdout.strip()
                  else:
                      return "No commits found"
              except Exception as e:
                  return f"Error: {str(e)}"

          def get_folder_info():
              """Get information about all folders in the repository"""
              folders_info = []
              # Walk through all directories
              for root, dirs, files in os.walk('.'):
                  # Skip .git directory and other hidden directories
                  dirs[:] = [d for d in dirs if not d.startswith('.')]

                  for dir_name in dirs:
                      folder_path = os.path.join(root, dir_name)
                      relative_path = os.path.relpath(folder_path, '.')
                      # Get last commit date
                      last_updated = get_last_commit_date(relative_path)
                      # Get folder size (number of files)
                      file_count = 0
                      try:
                          for _, _, folder_files in os.walk(folder_path):
                              file_count += len(folder_files)
                      except:
                          file_count = 0
                      folders_info.append({
                          'Folder Path': relative_path,
                          'Folder Name': dir_name,
                          'Last Updated': last_updated,
                          'File Count': file_count,
                          'Parent Directory': os.path.dirname(relative_path) if os.path.dirname(relative_path) else 'Root'
                      })
              return folders_info

          # Generate the folder inventory
          print("Generating folder inventory...")
          folders_data = get_folder_info()

          if not folders_data:
              print("No folders found in the repository")
              folders_data = [{'Folder Path': 'No folders found', 'Folder Name': '', 'Last Updated': '', 'File Count': 0, 'Parent Directory': ''}]
          # Create DataFrame
          df = pd.DataFrame(folders_data)
          # Sort by last updated date (newest first)
          df_sorted = df.sort_values('Last Updated', ascending=False)
          # Add metadata
          metadata = {
              'Repository': '${{ github.repository }}',
              'Generated On': datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC'),
              'Total Folders': len(folders_data),
              'Workflow Run': '${{ github.run_number }}'
          }
          # Create Excel file with multiple sheets
          with pd.ExcelWriter('Release-Notes.xlsx', engine='openpyxl') as writer:
              # Main data sheet
              df_sorted.to_excel(writer, sheet_name='Folder Inventory', index=False)
              # Metadata sheet
              metadata_df = pd.DataFrame(list(metadata.items()), columns=['Property', 'Value'])
              metadata_df.to_excel(writer, sheet_name='Metadata', index=False)
              # Summary sheet
              summary_data = {
                  'Metric': ['Total Folders', 'Folders with Files', 'Empty Folders', 'Most Recent Update'],
                  'Value': [
                      len(folders_data),
                      len([f for f in folders_data if f['File Count'] > 0]),
                      len([f for f in folders_data if f['File Count'] == 0]),
                      df_sorted.iloc[0]['Last Updated'] if len(df_sorted) > 0 else 'N/A'
                  ]
              }
              summary_df = pd.DataFrame(summary_data)
              summary_df.to_excel(writer, sheet_name='Summary', index=False)

          print(f"Release-Notes.xlsx generated successfully!")
          print(f"Total folders found: {len(folders_data)}")

          # Check if file was created successfully
          if os.path.exists('Release-Notes.xlsx'):
              print("✅ Excel file created successfully and ready to be committed to repository")
          else:
              print("❌ Failed to create Excel file")
              exit(1)
          EOF

      - name: Commit Excel file to repository
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add Release-Notes.xlsx
          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update Release-Notes.xlsx - Folder inventory updated on $(date)"
            git push
          fi

      - name: Display summary
        run: |
          echo "## Repository Folder Inventory Generated 📊" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Repository**: ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Generated on**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "- **Workflow run**: #${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📄 **Release-Notes.xlsx has been updated in the repository**" >> $GITHUB_STEP_SUMMARY
          # Show first few entries
          python << 'EOF'
          import pandas as pd
          try:
              df = pd.read_excel('Release-Notes.xlsx', sheet_name='Folder Inventory')
              print("\n## Preview of Folder Inventory:")
              print(df.head(10).to_string(index=False))
          except:
              print("Could not read the generated Excel file for preview")
          EOF
